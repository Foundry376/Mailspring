{"version":3,"sources":["../src/streamError.js"],"names":[],"mappings":";;;;;;6BAAgC,gBAAgB;;AAGhD,IAAM,UAAU,GAAG,CACf,YAAY,EACZ,sBAAsB,EACtB,UAAU,EACV,oBAAoB,EACpB,WAAW,EACX,cAAc,EACd,qBAAqB,EACrB,uBAAuB,EACvB,cAAc,EACd,mBAAmB,EACnB,aAAa,EACb,gBAAgB,EAChB,iBAAiB,EACjB,kBAAkB,EAClB,0BAA0B,EAC1B,OAAO,EACP,qBAAqB,EACrB,gBAAgB,EAChB,gBAAgB,EAChB,iBAAiB,EACjB,qBAAqB,EACrB,sBAAsB,EACtB,qBAAqB,EACrB,yBAAyB,EACzB,qBAAqB,CACxB,CAAC;;qBAGa,UAAU,GAAG,EAAE;;AAE1B,QAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;;AAEtB,OAAG,CAAC,MAAM,CAAC;AACP,YAAI,EAAE,aAAa;AACnB,iBAAS,EAAE,yBAAG,MAAM;AACpB,eAAO,EAAE,OAAO;AAChB,gBAAQ,EAAE,IAAI;AACd,cAAM,EAAE;AACJ,gBAAI,EAAE;AACF,mBAAG,EAAE,eAAY;;AAEb,2BAAO,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;iBAC3B;AACD,mBAAG,EAAE,aAAU,KAAK,EAAE;;AAElB,wBAAI,CAAC,KAAK,GAAG,KAAK,CAAC;iBACtB;aACJ;AACD,qBAAS,EAAE,KAAK,CAAC,OAAO,CAAC,yBAAG,YAAY,EAAE,UAAU,CAAC;AACrD,wBAAY,EAAE;AACV,mBAAG,EAAE,eAAY;;AAEb,2BAAO,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,yBAAG,YAAY,EAAE,gBAAgB,CAAC,CAAC;iBACxE;AACD,mBAAG,EAAE,aAAU,KAAK,EAAE;;AAElB,wBAAI,CAAC,SAAS,GAAG,gBAAgB,CAAC;AAClC,yBAAK,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,yBAAG,YAAY,EAAE,gBAAgB,EAAE,KAAK,CAAC,CAAC;iBACxE;aACJ;AACD,iBAAK,EAAE;AACH,mBAAG,EAAE,eAAY;;AAEb,2BAAO,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,yBAAG,YAAY,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC7E;aACJ;AACD,gBAAI,EAAE;AACF,mBAAG,EAAE,eAAY;;AAEb,wBAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;AACtB,2BAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;iBAChC;AACD,mBAAG,EAAE,aAAU,KAAK,EAAE;;AAElB,yBAAK,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,yBAAG,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC7E;aACJ;SACJ;KACJ,CAAC,CAAC;CACN","file":"streamError.js","sourcesContent":["import { Namespace as NS } from 'xmpp-constants';\n\n\nconst CONDITIONS = [\n    'bad-format',\n    'bad-namespace-prefix',\n    'conflict',\n    'connection-timeout',\n    'host-gone',\n    'host-unknown',\n    'improper-addressing',\n    'internal-server-error',\n    'invalid-from',\n    'invalid-namespace',\n    'invalid-xml',\n    'not-authorized',\n    'not-well-formed',\n    'policy-violation',\n    'remote-connection-failed',\n    'reset',\n    'resource-constraint',\n    'restricted-xml',\n    'see-other-host',\n    'system-shutdown',\n    'undefined-condition',\n    'unsupported-encoding',\n    'unsupported-feature',\n    'unsupported-stanza-type',\n    'unsupported-version'\n];\n\n\nexport default function (JXT) {\n\n    let Utils = JXT.utils;\n\n    JXT.define({\n        name: 'streamError',\n        namespace: NS.STREAM,\n        element: 'error',\n        topLevel: true,\n        fields: {\n            lang: {\n                get: function () {\n\n                    return this._lang || '';\n                },\n                set: function (value) {\n\n                    this._lang = value;\n                }\n            },\n            condition: Utils.enumSub(NS.STREAM_ERROR, CONDITIONS),\n            seeOtherHost: {\n                get: function () {\n\n                    return Utils.getSubText(this.xml, NS.STREAM_ERROR, 'see-other-host');\n                },\n                set: function (value) {\n\n                    this.condition = 'see-other-host';\n                    Utils.setSubText(this.xml, NS.STREAM_ERROR, 'see-other-host', value);\n                }\n            },\n            $text: {\n                get: function () {\n\n                    return Utils.getSubLangText(this.xml, NS.STREAM_ERROR, 'text', this.lang);\n                }\n            },\n            text: {\n                get: function () {\n\n                    let text = this.$text;\n                    return text[this.lang] || '';\n                },\n                set: function (value) {\n\n                    Utils.setSubLangText(this.xml, NS.STREAM_ERROR, 'text', value, this.lang);\n                }\n            }\n        }\n    });\n}\n"]}