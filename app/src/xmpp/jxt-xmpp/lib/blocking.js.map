{"version":3,"sources":["../src/blocking.js"],"names":[],"mappings":";;;;;;6BAAgC,gBAAgB;;uBAC5B,UAAU;;qBAGf,UAAU,GAAG,EAAE;;AAE1B,QAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;;AAEtB,QAAI,OAAO,GAAG;AACV,WAAG,EAAE,eAAY;;AAEb,gBAAI,MAAM,GAAG,EAAE,CAAC;AAChB,gBAAI,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,yBAAG,QAAQ,EAAE,MAAM,CAAC,CAAC;AACtD,gBAAI,CAAC,KAAK,CAAC,MAAM,EAAE;AACf,uBAAO,MAAM,CAAC;aACjB;;AAED,iBAAK,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;;AAE1B,sBAAM,CAAC,IAAI,CAAC,iBAAQ,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;aAC7D,CAAC,CAAC;;AAEH,mBAAO,MAAM,CAAC;SACjB;AACD,WAAG,EAAE,aAAU,MAAM,EAAE;;AAEnB,gBAAI,IAAI,GAAG,IAAI,CAAC;AAChB,kBAAM,CAAC,OAAO,CAAC,UAAU,KAAK,EAAE;;AAE5B,oBAAI,IAAI,GAAG,KAAK,CAAC,aAAa,CAAC,yBAAG,QAAQ,EAAE,MAAM,EAAE,yBAAG,QAAQ,CAAC,CAAC;AACjE,qBAAK,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;AAClD,oBAAI,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;aAC9B,CAAC,CAAC;SACN;KACJ,CAAC;;AAEF,QAAI,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC;AACnB,YAAI,EAAE,OAAO;AACb,iBAAS,EAAE,yBAAG,QAAQ;AACtB,eAAO,EAAE,OAAO;AAChB,cAAM,EAAE;AACJ,gBAAI,EAAE,OAAO;SAChB;KACJ,CAAC,CAAC;;AAEH,QAAI,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC;AACrB,YAAI,EAAE,SAAS;AACf,iBAAS,EAAE,yBAAG,QAAQ;AACtB,eAAO,EAAE,SAAS;AAClB,cAAM,EAAE;AACJ,gBAAI,EAAE,OAAO;SAChB;KACJ,CAAC,CAAC;;AAEH,QAAI,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC;AACvB,YAAI,EAAE,WAAW;AACjB,iBAAS,EAAE,yBAAG,QAAQ;AACtB,eAAO,EAAE,WAAW;AACpB,cAAM,EAAE;AACJ,gBAAI,EAAE,OAAO;SAChB;KACJ,CAAC,CAAC;;AAGH,OAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACpB,OAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AACtB,OAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;CAC3B","file":"blocking.js","sourcesContent":["import { Namespace as NS } from 'xmpp-constants';\nimport { JID } from 'xmpp-jid';\n\n\nexport default function (JXT) {\n\n    let Utils = JXT.utils;\n\n    let jidList = {\n        get: function () {\n\n            let result = [];\n            let items = Utils.find(this.xml, NS.BLOCKING, 'item');\n            if (!items.length) {\n                return result;\n            }\n\n            items.forEach(function (item) {\n\n                result.push(new JID(Utils.getAttribute(item, 'jid', '')));\n            });\n\n            return result;\n        },\n        set: function (values) {\n\n            let self = this;\n            values.forEach(function (value) {\n\n                let item = Utils.createElement(NS.BLOCKING, 'item', NS.BLOCKING);\n                Utils.setAttribute(item, 'jid', value.toString());\n                self.xml.appendChild(item);\n            });\n        }\n    };\n\n    let Block = JXT.define({\n        name: 'block',\n        namespace: NS.BLOCKING,\n        element: 'block',\n        fields: {\n            jids: jidList\n        }\n    });\n\n    let Unblock = JXT.define({\n        name: 'unblock',\n        namespace: NS.BLOCKING,\n        element: 'unblock',\n        fields: {\n            jids: jidList\n        }\n    });\n\n    let BlockList = JXT.define({\n        name: 'blockList',\n        namespace: NS.BLOCKING,\n        element: 'blocklist',\n        fields: {\n            jids: jidList\n        }\n    });\n\n\n    JXT.extendIQ(Block);\n    JXT.extendIQ(Unblock);\n    JXT.extendIQ(BlockList);\n}\n"]}