{"version":3,"sources":["../src/jingle.js"],"names":[],"mappings":"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","file":"jingle.js","sourcesContent":["import { Namespace as NS } from 'xmpp-constants';\n\nconst CONDITIONS = [\n    'out-of-order',\n    'tie-break',\n    'unknown-session',\n    'unsupported-info'\n];\nconst REASONS = [\n    'alternative-session',\n    'busy',\n    'cancel',\n    'connectivity-error',\n    'decline',\n    'expired',\n    'failed-application',\n    'failed-transport',\n    'general-error',\n    'gone',\n    'incompatible-parameters',\n    'media-error',\n    'security-error',\n    'success',\n    'timeout',\n    'unsupported-applications',\n    'unsupported-transports'\n];\n\n\nexport default function (JXT) {\n\n    let Utils = JXT.utils;\n\n    let Jingle = JXT.define({\n        name: 'jingle',\n        namespace: NS.JINGLE_1,\n        element: 'jingle',\n        fields: {\n            action: Utils.attribute('action'),\n            initiator: Utils.attribute('initiator'),\n            responder: Utils.attribute('responder'),\n            sid: Utils.attribute('sid'),\n            info: {\n                get: function () {\n\n                    let opts = JXT.tagged('jingle-info').map(function (Info) {\n\n                        return Info.prototype._name;\n                    });\n                    for (let i = 0, len = opts.length; i < len; i++) {\n                        if (this._extensions[opts[i]]) {\n                            return this._extensions[opts[i]];\n                        }\n                    }\n                    if (Utils.getAttribute(this.xml, 'action') === 'session-info') {\n                        if (this.xml.children.length === 0) {\n                            return {\n                                infoType: 'ping'\n                            };\n                        }\n                        return {\n                            infoType: 'unknown'\n                        };\n                    }\n                },\n                set: function (value) {\n\n                    if (value.infoType === 'ping') {\n                        return;\n                    }\n\n                    let ext = '_' + value.infoType;\n                    this[ext] = value;\n                }\n            }\n        }\n    });\n\n    let Content = JXT.define({\n        name: '_jingleContent',\n        namespace: NS.JINGLE_1,\n        element: 'content',\n        fields: {\n            creator: Utils.attribute('creator'),\n            disposition: Utils.attribute('disposition', 'session'),\n            name: Utils.attribute('name'),\n            senders: Utils.attribute('senders', 'both'),\n            application: {\n                get: function () {\n\n                    let opts = JXT.tagged('jingle-application').map(function (Description) {\n\n                        return Description.prototype._name;\n                    });\n                    for (let i = 0, len = opts.length; i < len; i++) {\n                        if (this._extensions[opts[i]]) {\n                            return this._extensions[opts[i]];\n                        }\n                    }\n                },\n                set: function (value) {\n\n                    let ext = '_' + value.applicationType;\n                    this[ext] = value;\n                }\n            },\n            transport: {\n                get: function () {\n\n                    let opts = JXT.tagged('jingle-transport').map(function (Transport) {\n\n                        return Transport.prototype._name;\n                    });\n                    for (let i = 0, len = opts.length; i < len; i++) {\n                        if (this._extensions[opts[i]]) {\n                            return this._extensions[opts[i]];\n                        }\n                    }\n                },\n                set: function (value) {\n\n                    let ext = '_' + value.transportType;\n                    this[ext] = value;\n                }\n            },\n            security: {\n                get: function () {\n\n                    let opts = JXT.tagged('jingle-security').map(function (Info) {\n\n                        return Security.prototype._name;\n                    });\n                    for (let i = 0, len = opts.length; i < len; i++) {\n                        if (this._extensions[opts[i]]) {\n                            return this._extensions[opts[i]];\n                        }\n                    }\n                },\n                set: function (value) {\n\n                    let ext = '_' + value.securityType;\n                    this[ext] = value;\n                }\n            }\n        }\n    });\n\n    let Reason = JXT.define({\n        name: 'reason',\n        namespace: NS.JINGLE_1,\n        element: 'reason',\n        fields: {\n            condition: Utils.enumSub(NS.JINGLE_1, REASONS),\n            alternativeSession: {\n                get: function () {\n\n                    return Utils.getSubText(this.xml, NS.JINGLE_1, 'alternative-session');\n                },\n                set: function (value) {\n\n                    this.condition = 'alternative-session';\n                    Utils.setSubText(this.xml, NS.JINGLE_1, 'alternative-session', value);\n                }\n            },\n            text: Utils.textSub(NS.JINGLE_1, 'text')\n        }\n    });\n\n\n    JXT.extend(Jingle, Content, 'contents');\n    JXT.extend(Jingle, Reason);\n\n    JXT.extendIQ(Jingle);\n\n    JXT.withStanzaError(function (StanzaError) {\n\n        JXT.add(StanzaError, 'jingleCondition', Utils.enumSub(NS.JINGLE_ERRORS_1, CONDITIONS));\n    });\n}\n"]}